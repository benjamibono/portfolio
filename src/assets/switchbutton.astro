<button
  type="button"
  id="theme-selector"
  class="theme-toggle border w-10 h-10 border-border dark:border-darkborder rounded-lg hover:bg-border dark:hover:bg-darkgrey dark:hover:border-darkgrey transition duration-500 flex items-center justify-center"
  aria-label="Toggle theme"
  data-theme-toggle
  style="--theme-toggle-duration: 0.1s; --theme-toggle-ease: cubic-bezier(0.16, 1, 0.3, 1)"
>
  <span class="sr-only">Toggle theme</span>
  <svg
    xmlns="http://www.w3.org/2000/svg"
    aria-hidden="true"
    width="20"
    height="20"
    fill="currentColor"
    stroke-linecap="round"
    class="theme-toggle__classic"
    viewBox="0 0 32 32"
    style="transition: transform 0.1s cubic-bezier(0.16, 1, 0.3, 1)"
  >
    <clipPath id="theme-toggle__classic__cutout">
      <path d="M0-5h30a1 1 0 0 0 9 13v24H0Z"></path>
    </clipPath>
    <g clip-path="url(#theme-toggle__classic__cutout)">
      <circle cx="16" cy="16" r="9.34"></circle>
      <g stroke="currentColor" stroke-width="1.5">
        <path d="M16 5.5v-4"></path>
        <path d="M16 30.5v-4"></path>
        <path d="M1.5 16h4"></path>
        <path d="M26.5 16h4"></path>
        <path d="m23.4 8.6 2.8-2.8"></path>
        <path d="m5.7 26.3 2.9-2.9"></path>
        <path d="m5.8 5.8 2.8 2.8"></path>
        <path d="m23.4 23.4 2.9 2.9"></path>
      </g>
    </g>
  </svg>
</button>

<script>
  const themeToggle = document.getElementById('theme-selector');

  const updateTheme = async (theme) => {
    if (typeof window.animateThemeChange === 'function') {
      await window.animateThemeChange(theme);
      localStorage.setItem('theme', theme);
    } else {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
      } else {
        document.documentElement.classList.remove('dark');
      }
      localStorage.setItem('theme', theme);
    }
  };

  let isProcessing = false;
  themeToggle?.addEventListener('click', async () => {
    if (isProcessing) return;
    isProcessing = true;

    const isDark = document.documentElement.classList.contains('dark');
    await updateTheme(isDark ? 'light' : 'dark');

    // Toggle the theme-toggle--toggled class
    themeToggle.classList.toggle('theme-toggle--toggled');

    setTimeout(() => {
      isProcessing = false;
    }, 100);
  });

  // Set initial toggle state based on current theme
  if (document.documentElement.classList.contains('dark')) {
    themeToggle?.classList.add('theme-toggle--toggled');
  }

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      updateTheme(e.matches ? 'dark' : 'light');
      themeToggle?.classList.toggle('theme-toggle--toggled', e.matches);
    }
  });
</script>
